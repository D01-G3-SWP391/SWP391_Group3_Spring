package com.example.swp391_d01_g3.common;

import com.example.swp391_d01_g3.service.email.EmailService;
import com.example.swp391_d01_g3.service.security.AccountDetailsServiceImpl;
import com.example.swp391_d01_g3.service.security.IAccountService;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.util.Map;


@Component
public class CustomAuthenticationSuccessHandler extends SimpleUrlAuthenticationSuccessHandler {

    @Autowired
    private AccountDetailsServiceImpl accountDetailsService;
    
    @Autowired
    private EmailService emailService;
    
    @Autowired
    private IAccountService accountService;

    @Override
    public void onAuthenticationSuccess(HttpServletRequest request,
                                        HttpServletResponse response,
                                        Authentication authentication) throws IOException {
        String targetUrl = (String) request.getSession().getAttribute("REDIRECT_URL");
        System.out.println("REDIRECT_URL from session: " + targetUrl);
        request.getSession().removeAttribute("REDIRECT_URL");
        
        if (authentication.getPrincipal() instanceof OAuth2User oauth2User) {
            Map<String, Object> attributes = oauth2User.getAttributes();
            String email = (String) attributes.get("email");
            String fullName = (String) attributes.get("name");
            System.out.println("Logged in with Google - Email: " + email + ", Name: " + fullName);

            // Ki·ªÉm tra user c√≥ t·ªìn t·∫°i ch∆∞a ƒë·ªÉ bi·∫øt c√≥ ph·∫£i t√†i kho·∫£n m·ªõi
            boolean isNewUser = accountService.findByEmail(email) == null;
            
            accountDetailsService.saveOAuthUser(attributes);
            UserDetails userDetails = accountDetailsService.loadUserByUsername(email);
            
            // CH·ªà g·ª≠i email cho t√†i kho·∫£n M·ªöI
            if (isNewUser) {
                sendWelcomeEmail(email, fullName, "Google");
            }
            
            // T·∫°o Authentication object ƒë√∫ng c√°ch
            authentication = new UsernamePasswordAuthenticationToken(
                    userDetails,
                    null,
                    userDetails.getAuthorities()
            );
            org.springframework.security.core.context.SecurityContextHolder.getContext().setAuthentication(authentication);
        }
        // ƒê√£ T·∫ÆT email notification cho login th∆∞·ªùng xuy√™n b·∫±ng Email/Password
        
        if (targetUrl == null || targetUrl.isEmpty() || targetUrl.contains("favicon.ico") ||
                targetUrl.contains("error") || targetUrl.startsWith("/.well-known") ||
                targetUrl.endsWith(".css") || targetUrl.endsWith(".js") || targetUrl.endsWith(".json")) {
            if (authentication.getAuthorities().contains(new SimpleGrantedAuthority("ROLE_admin"))) {
                targetUrl = "/Admin";
            } else if (authentication.getAuthorities().contains(new SimpleGrantedAuthority("ROLE_employer"))) {
                targetUrl = "/Employer";
            } else if (authentication.getAuthorities().contains(new SimpleGrantedAuthority("ROLE_student"))) {
                targetUrl = "/Student";
            } else {
                targetUrl = "/HomePage";
            }
        }
        clearAuthenticationAttributes(request);
        getRedirectStrategy().sendRedirect(request, response, targetUrl);
    }
    
    /**
     * G·ª≠i email ch√†o m·ª´ng cho t√†i kho·∫£n m·ªõi (ch·ªâ d√πng cho Google login)
     */
    private void sendWelcomeEmail(String email, String fullName, String loginMethod) {
        try {
            String subject = "üéâ Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi SWP391 Job Portal!";
            String body = "Xin ch√†o " + fullName + ",\n\n" +
                         "üéâ Ch√†o m·ª´ng b·∫°n ƒë√£ gia nh·∫≠p c·ªông ƒë·ªìng SWP391 Job Portal!\n\n" +
                         "‚úÖ T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng th√¥ng qua " + loginMethod + "\n" +
                         "üìß Email ƒëƒÉng nh·∫≠p: " + email + "\n\n" +
                         "üöÄ B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu:\n" +
                         "   ‚Ä¢ T√¨m ki·∫øm vi·ªác l√†m ph√π h·ª£p\n" +
                         "   ‚Ä¢ C·∫≠p nh·∫≠t h·ªì s∆° c√° nh√¢n\n" +
                         "   ‚Ä¢ Tham gia c√°c s·ª± ki·ªán tuy·ªÉn d·ª•ng\n\n" +
                         "üí¨ N·∫øu c√≥ b·∫•t k·ª≥ th·∫Øc m·∫Øc n√†o, ƒë·ª´ng ng·∫°i li√™n h·ªá v·ªõi ch√∫ng t√¥i.\n\n" +
                         "Tr√¢n tr·ªçng,\n" +
                         "üè¢ ƒê·ªôi ng≈© SWP391 Job Portal\n" +
                         "üìû Hotline: 1900-xxxx\n" +
                         "üåê Website: http://localhost:8080";
            
            emailService.sendEmail(email, subject, body);
            System.out.println("‚úÖ Welcome email sent to NEW user: " + email + " via " + loginMethod);
            
        } catch (Exception e) {
            System.err.println("‚ùå Failed to send welcome email to: " + email + " - Error: " + e.getMessage());
        }
    }
}