package com.example.swp391_d01_g3.service.chat;

import com.example.swp391_d01_g3.dto.ChatMessageDTO;
import com.example.swp391_d01_g3.dto.ChatRoomDTO;
import com.example.swp391_d01_g3.dto.CreateChatRoomDTO;
import com.example.swp391_d01_g3.model.ChatMessage;
import com.example.swp391_d01_g3.model.ChatRoom;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import java.util.List;
import java.util.Optional;

/**
 * üí¨ Chat Service Interface
 * 
 * Service qu·∫£n l√Ω t·∫•t c·∫£ ch·ª©c nƒÉng chat
 */
public interface IChatService {
    
    // ========== CHAT ROOM MANAGEMENT ==========
    
    /**
     * T·∫°o ho·∫∑c t√¨m chat room gi·ªØa student v√† employer
     */
    ChatRoom findOrCreateChatRoom(CreateChatRoomDTO createChatRoomDTO);
    
    /**
     * L·∫•y danh s√°ch chat room c·ªßa user
     */
    List<ChatRoomDTO> getUserChatRooms(Long userId, String userType);
    
    /**
     * L·∫•y th√¥ng tin chat room c·ª• th·ªÉ
     */
    Optional<ChatRoomDTO> getChatRoomInfo(Long chatRoomId, Long userId);
    
    /**
     * Ki·ªÉm tra user c√≥ quy·ªÅn truy c·∫≠p chat room kh√¥ng
     */
    boolean hasAccessToChatRoom(Long chatRoomId, Long userId, String userType);
    
    // ========== MESSAGE MANAGEMENT ==========
    
    /**
     * G·ª≠i tin nh·∫Øn m·ªõi
     */
    ChatMessage sendMessage(ChatMessageDTO messageDTO);
    
    /**
     * L·∫•y l·ªãch s·ª≠ tin nh·∫Øn c·ªßa chat room (c√≥ ph√¢n trang)
     */
    Page<ChatMessageDTO> getChatHistory(Long chatRoomId, Long userId, Pageable pageable);
    
    /**
     * L·∫•y tin nh·∫Øn c·ªßa chat room (List format)
     */
    List<ChatMessageDTO> getChatMessages(Long chatRoomId, int page, int size);
    
    /**
     * ƒê√°nh d·∫•u tin nh·∫Øn ƒë√£ ƒë·ªçc
     */
    void markMessagesAsRead(Long chatRoomId, Long userId);
    
    /**
     * T√¨m ki·∫øm tin nh·∫Øn trong chat room
     */
    List<ChatMessageDTO> searchMessages(Long chatRoomId, String keyword, Long userId);
    
    /**
     * L·∫•y s·ªë tin nh·∫Øn ch∆∞a ƒë·ªçc c·ªßa user
     */
    int getUnreadMessageCount(Long userId, String userType);
    
    /**
     * L·∫•y s·ªë tin nh·∫Øn ch∆∞a ƒë·ªçc trong chat room c·ª• th·ªÉ
     */
    int getUnreadMessageCount(Long chatRoomId, Long userId);
    
    // ========== USER PRESENCE ==========
    
    /**
     * C·∫≠p nh·∫≠t tr·∫°ng th√°i online c·ªßa user
     */
    void updateUserPresence(Long userId, String userType, boolean isOnline);
    
    /**
     * Ki·ªÉm tra user c√≥ online kh√¥ng
     */
    boolean isUserOnline(Long userId, String userType);
    
    /**
     * C·∫≠p nh·∫≠t tr·∫°ng th√°i typing
     */
    void updateTypingStatus(Long chatRoomId, Long userId, String userType, boolean isTyping);
    
    // FILE SHARING s·∫Ω implement sau
    
    // ========== UTILITY METHODS ==========
    
    /**
     * Chuy·ªÉn ƒë·ªïi ChatMessage entity th√†nh DTO
     */
    ChatMessageDTO convertToDTO(ChatMessage message);
    
    /**
     * Chuy·ªÉn ƒë·ªïi ChatRoom entity th√†nh DTO
     */
    ChatRoomDTO convertToDTO(ChatRoom chatRoom, Long currentUserId, String currentUserType);
}
