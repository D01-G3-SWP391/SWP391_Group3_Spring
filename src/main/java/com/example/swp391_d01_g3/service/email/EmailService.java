package com.example.swp391_d01_g3.service.email;

import com.example.swp391_d01_g3.dto.PendingRegisterDTO;
import com.example.swp391_d01_g3.model.ForgotPassword;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import java.util.Date;
import java.util.Random;
import java.util.concurrent.CompletableFuture;
import com.example.swp391_d01_g3.model.Account;
import com.example.swp391_d01_g3.repository.ForgotPasswordRepository;
import com.example.swp391_d01_g3.repository.IAccountRepository;

@Service
public class EmailService {
    @Autowired
    private JavaMailSender mailSender;
    
    @Autowired
    private ForgotPasswordRepository forgotPasswordRepository;

    @Autowired
    private IAccountRepository accountRepository;
    
    @Async("emailTaskExecutor")
    public CompletableFuture<Void> sendEmail(String to, String subject, String body) {
        try {
            SimpleMailMessage simpleMailMessage = new SimpleMailMessage();
            simpleMailMessage.setTo(to);
            simpleMailMessage.setSubject(subject);
            simpleMailMessage.setText(body);
            simpleMailMessage.setFrom("viettaifptudn@gmail.com");
            mailSender.send(simpleMailMessage);
            System.out.println("Email sent to: " + to + " - Thread: " + Thread.currentThread().getName());
            return CompletableFuture.completedFuture(null);
        } catch (Exception e) {
            System.err.println("Failed to send email to: " + to + " - Error: " + e.getMessage());
            return CompletableFuture.failedFuture(e);
        }
    }
    @Async("emailTaskExecutor")
    public CompletableFuture<Void> sendForgotPassEmail(String to){
        try {
            SimpleMailMessage  simpleMailMessage = new SimpleMailMessage();
            int otp = otpGenerator();

            Account account = accountRepository.findByEmail(to);
            if (account == null) {
                System.err.println("Attempted to send forgot password email to non-existent account: " + to);
                return CompletableFuture.failedFuture(new RuntimeException("Account not found: " + to));
            }

            // X√≥a b·∫£n ghi ForgotPassword hi·ªán c√≥ cho t√†i kho·∫£n n√†y
            ForgotPassword existingForgotPassword = forgotPasswordRepository.findByAccount(account);
            if (existingForgotPassword != null) {
                // H·ªßy b·ªè li√™n k·∫øt trong T√†i kho·∫£n ƒë·ªÉ ngƒÉn ch·∫∑n TransientObjectException
                if (account.getForgotPassword() != null && account.getForgotPassword().equals(existingForgotPassword)) {
                    account.setForgotPassword(null);
                }
                forgotPasswordRepository.delete(existingForgotPassword);
            }

            simpleMailMessage.setTo(to);
            simpleMailMessage.setText("This is OTP for your Forgot Password request: "+ otp +
                    " OTP s·∫Ω h·∫øt h·∫°n trong 60 gi√¢y"
            );
            simpleMailMessage.setSubject("OTP for Forgot Password request");
            simpleMailMessage.setFrom("viettaifptudn@gmail.com");

            ForgotPassword forgotPasswordEntity = ForgotPassword.builder()
                    .otp(otp)
                    .expirationTime(new Date(System.currentTimeMillis() + 60 * 1000)) // OTP valid for 60 seconds
                    .account(account)
                    .build();
            forgotPasswordRepository.save(forgotPasswordEntity);

            // Actually send the email
            mailSender.send(simpleMailMessage);
            System.out.println("Forgot password Email sent to " + to + " with OTP: " + otp + " - Thread: " + Thread.currentThread().getName());
            return CompletableFuture.completedFuture(null);
        } catch (Exception e) {
            System.err.println("Failed to send forgot password email to: " + to + " - Error: " + e.getMessage());
            return CompletableFuture.failedFuture(e);
        }
    }
    
    /**
     * G·ª≠i email x√°c th·ª±c v·ªõi OTP cho ng∆∞·ªùi d√πng m·ªõi ƒëƒÉng k√Ω (kh√¥ng c·∫ßn account trong DB)
     * @param email Email ng∆∞·ªùi nh·∫≠n
     * @param fullName T√™n ƒë·∫ßy ƒë·ªß c·ªßa ng∆∞·ªùi d√πng
     * @return CompletableFuture v·ªõi OTP ƒë∆∞·ª£c t·∫°o
     */
    @Async("emailTaskExecutor")
    public CompletableFuture<Integer> sendVerifyMailForRegistration(String email, String fullName) {
        try {
            SimpleMailMessage simpleMailMessage = new SimpleMailMessage();
            int otp = otpGenerator();

            // T·∫°o n·ªôi dung email
            StringBuilder emailBody = new StringBuilder();
            emailBody.append("Xin ch√†o ").append(fullName).append(",\n\n");
            emailBody.append("üéâ Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi JOB4YOU!\n\n");
            emailBody.append("ƒê·ªÉ ho√†n t·∫•t qu√° tr√¨nh ƒëƒÉng k√Ω t√†i kho·∫£n, vui l√≤ng x√°c th·ª±c email c·ªßa b·∫°n b·∫±ng m√£ OTP sau:\n\n");
            emailBody.append("üîê M√£ OTP: ").append(otp).append("\n\n");
            emailBody.append("‚ö†Ô∏è M√£ OTP n√†y s·∫Ω h·∫øt h·∫°n trong 10 ph√∫t.\n\n");
            emailBody.append("N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán y√™u c·∫ßu n√†y, vui l√≤ng b·ªè qua email n√†y.\n\n");
            emailBody.append("Tr√¢n tr·ªçng,\n");
            emailBody.append("üè¢ ƒê·ªôi ng≈© JOB4YOU\n");
            emailBody.append("üìû Hotline: 1900-xxxx\n");
            emailBody.append("üåê Website: http://localhost:8080");

            simpleMailMessage.setTo(email);
            simpleMailMessage.setText(emailBody.toString());
            simpleMailMessage.setSubject("üîê X√°c th·ª±c email ƒëƒÉng k√Ω t√†i kho·∫£n JOB4YOU");
            simpleMailMessage.setFrom("viettaifptudn@gmail.com");

            // G·ª≠i email
            mailSender.send(simpleMailMessage);
            System.out.println("Registration verification email sent to " + email + " with OTP: " + otp + " - Thread: " + Thread.currentThread().getName());
            
            return CompletableFuture.completedFuture(otp);
        } catch (Exception e) {
            System.err.println("Failed to send registration verification email to: " + email + " - Error: " + e.getMessage());
            return CompletableFuture.failedFuture(e);
        }
    }

    /**
     * T·∫°o t√†i kho·∫£n th·ª±c s·ª± sau khi x√°c th·ª±c OTP th√†nh c√¥ng
     * @param pendingRegistration Th√¥ng tin ƒëƒÉng k√Ω ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c
     * @return Account ƒë√£ ƒë∆∞·ª£c t·∫°o
     */
    public Account createAccountAfterVerification(PendingRegisterDTO pendingRegistration) {
        // T·∫°o Account
        Account account = new Account();
        account.setFullName(pendingRegistration.getFullName());
        account.setEmail(pendingRegistration.getEmail());
        account.setPassword(pendingRegistration.getPassword());
        account.setPhone(pendingRegistration.getPhone());
        account.setRole(pendingRegistration.getRole());
        account.setAvatarUrl(pendingRegistration.getAvatarUrl());
        account.setStatus(Account.Status.active); // K√≠ch ho·∫°t ngay v√¨ ƒë√£ verify

        Account savedAccount = accountRepository.save(account);
        
        // G·ª≠i email ch√†o m·ª´ng sau khi t·∫°o account th√†nh c√¥ng
        String roleText = account.getRole() != null ? account.getRole().name().toLowerCase() : "";
        String role = switch (roleText) {
            case "student" -> "Student";
            case "employer" -> "Employer";
            default -> null;
        };
        if (role != null) {
            sendWelcomeEmail(savedAccount.getEmail(), savedAccount.getFullName(), role);
        } else {
            System.err.println("Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c vai tr√≤, kh√¥ng g·ª≠i email ch√†o m·ª´ng!");
        }
        
        System.out.println("Account created successfully after verification for: " + savedAccount.getEmail());
        return savedAccount;
    }

    private Integer otpGenerator(){
        Random random = new Random();
        return random.nextInt(100_000,999_999);
    }
    
    /**
     * G·ª≠i email ch√†o m·ª´ng cho th√†nh vi√™n m·ªõi
     * @param email Email ng∆∞·ªùi nh·∫≠n
     * @param fullName T√™n ƒë·∫ßy ƒë·ªß
     * @param role Vai tr√≤: "Student", "Employer", "Google"
     */
    @Async("emailTaskExecutor")
    public CompletableFuture<Void> sendWelcomeEmail(String email, String fullName, String role) {
        try {
            String subject = "üéâ Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi JOB4YOU!";
            String roleText = getRoleText(role);
            
            String body = buildWelcomeEmailBody(fullName, email, role, roleText);
            
            // G·ª≠i email tr·ª±c ti·∫øp thay v√¨ g·ªçi sendEmail async ƒë·ªÉ tr√°nh nested async
            SimpleMailMessage simpleMailMessage = new SimpleMailMessage();
            simpleMailMessage.setTo(email);
            simpleMailMessage.setSubject(subject);
            simpleMailMessage.setText(body);
            simpleMailMessage.setFrom("viettaifptudn@gmail.com");
            mailSender.send(simpleMailMessage);
            
            System.out.println("Welcome email sent to: " + email + " (Role: " + role + ") - Thread: " + Thread.currentThread().getName());
            return CompletableFuture.completedFuture(null);
            
        } catch (Exception e) {
            System.err.println("Failed to send welcome email to: " + email + " - Error: " + e.getMessage());
            return CompletableFuture.failedFuture(e);
        }
    }
    
    private String getRoleText(String role) {
        return switch (role) {
            case "Student" -> "Sinh vi√™n";
            case "Employer" -> "Nh√† tuy·ªÉn d·ª•ng";
            case "Google" -> "Ng∆∞·ªùi d√πng";
            default -> "Th√†nh vi√™n";
        };
    }
    
    private String buildWelcomeEmailBody(String fullName, String email, String role, String roleText) {
        StringBuilder body = new StringBuilder();
        body.append("Xin ch√†o ").append(fullName).append(",\n\n");
        
        if (role.equals("Google")) {
            body.append("üéâ Ch√†o m·ª´ng b·∫°n ƒë√£ gia nh·∫≠p c·ªông ƒë·ªìng JOB4YOU!\n\n")
                .append("‚úÖ T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng th√¥ng qua Google\n");
        } else {
            body.append("üéâ Ch√†o m·ª´ng b·∫°n ƒë√£ gia nh·∫≠p c·ªông ƒë·ªìng JOB4YOU v·ªõi vai tr√≤ ").append(roleText).append("!\n\n")
                .append("‚úÖ T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng\n");
        }
        
        body.append("üìß Email ƒëƒÉng nh·∫≠p: ").append(email).append("\n");
        
        // Th√™m h∆∞·ªõng d·∫´n theo role
        body.append("üöÄ B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu:\n");
        if (role.equals("Student") || role.equals("Google")) {
            body.append("   ‚Ä¢ T√¨m ki·∫øm vi·ªác l√†m ph√π h·ª£p\n")
                .append("   ‚Ä¢ C·∫≠p nh·∫≠t h·ªì s∆° c√° nh√¢n\n")
                .append("   ‚Ä¢ Tham gia c√°c s·ª± ki·ªán tuy·ªÉn d·ª•ng\n")
                .append("   ‚Ä¢ N·ªôp ƒë∆°n ·ª©ng tuy·ªÉn tr·ª±c tuy·∫øn\n\n");
        } else if (role.equals("Employer")) {
            body.append("   ‚Ä¢ ƒêƒÉng tin tuy·ªÉn d·ª•ng\n")
                .append("   ‚Ä¢ Qu·∫£n l√Ω h·ªì s∆° c√¥ng ty\n")
                .append("   ‚Ä¢ T·ªï ch·ª©c s·ª± ki·ªán tuy·ªÉn d·ª•ng\n")
                .append("   ‚Ä¢ T√¨m ki·∫øm ·ª©ng vi√™n ph√π h·ª£p\n\n");
        }
        
        body.append("üí¨ N·∫øu c√≥ b·∫•t k·ª≥ th·∫Øc m·∫Øc n√†o, ƒë·ª´ng ng·∫°i li√™n h·ªá v·ªõi ch√∫ng t√¥i.\n\n")
            .append("Ch√∫c b·∫°n c√≥ tr·∫£i nghi·ªám tuy·ªát v·ªùi!\n\n")
            .append("Tr√¢n tr·ªçng,\n")
            .append("üè¢ ƒê·ªôi ng≈© JOB4YOU\n")
            .append("üìû Hotline: 1900-xxxx\n")
            .append("üåê Website: http://localhost:8080");
            
        return body.toString();
    }

    /**
     * G·ª≠i email l·ªãch ph·ªèng v·∫•n cho ·ª©ng vi√™n
     */
    @Async("emailTaskExecutor")
    public CompletableFuture<Void> sendInterviewScheduleEmail(String to, String candidateName, String jobTitle, String interviewTime, String interviewType, String meetingLink, String note) {
        try {
            String subject = "L·ªãch ph·ªèng v·∫•n v·ªã tr√≠ " + jobTitle + " t·∫°i JOB4YOU";
            StringBuilder body = new StringBuilder();
            body.append("Xin ch√†o ").append(candidateName).append(",\n\n");
            body.append("Ch√∫c m·ª´ng b·∫°n ƒë√£ v∆∞·ª£t qua v√≤ng h·ªì s∆°!\n");
            body.append("Ch√∫ng t√¥i xin m·ªùi b·∫°n tham gia ph·ªèng v·∫•n v·ªõi th√¥ng tin sau:\n");
            body.append("- Th·ªùi gian: ").append(interviewTime).append("\n");
            body.append("- H√¨nh th·ª©c: ").append(interviewType).append("\n");
            if (meetingLink != null && !meetingLink.isEmpty()) {
                body.append("- Link ph·ªèng v·∫•n: ").append(meetingLink).append("\n");
            }
            if (note != null && !note.isEmpty()) {
                body.append("- Ghi ch√∫: ").append(note).append("\n");
            }
            body.append("\nVui l√≤ng ph·∫£n h·ªìi email n√†y n·∫øu b·∫°n c√≥ th·∫Øc m·∫Øc.\n");
            body.append("Tr√¢n tr·ªçng,\nƒê·ªôi ng≈© JOB4YOU");
            
            // G·ª≠i email tr·ª±c ti·∫øp
            SimpleMailMessage simpleMailMessage = new SimpleMailMessage();
            simpleMailMessage.setTo(to);
            simpleMailMessage.setSubject(subject);
            simpleMailMessage.setText(body.toString());
            simpleMailMessage.setFrom("viettaifptudn@gmail.com");
            mailSender.send(simpleMailMessage);
            
            System.out.println("Interview schedule email sent to: " + to + " - Thread: " + Thread.currentThread().getName());
            return CompletableFuture.completedFuture(null);
        } catch (Exception e) {
            System.err.println("Failed to send interview schedule email to: " + to + " - Error: " + e.getMessage());
            return CompletableFuture.failedFuture(e);
        }
    }

    /**
     * G·ª≠i email th√¥ng b√°o ph·ªèng v·∫•n pass - ƒë∆∞·ª£c nh·∫≠n v√†o l√†m vi·ªác
     */
    @Async("emailTaskExecutor")
    public CompletableFuture<Void> sendApplicationAcceptedEmail(String to, String candidateName, String jobTitle, String companyName) {
        try {
        String subject = "üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ ph·ªèng v·∫•n PASS v·ªã tr√≠ " + jobTitle + " t·∫°i " + companyName;
        StringBuilder body = new StringBuilder();

        body.append("Xin ch√†o ").append(candidateName).append(",\n\n");
        body.append("üéâ CH√öC M·ª™NG B·∫†N ƒê√É PH·ªéNG V·∫§N PASS! üéâ\n\n");
        body.append("Ch√∫ng t√¥i r·∫•t vui m·ª´ng th√¥ng b√°o r·∫±ng b·∫°n ƒë√£ v∆∞·ª£t qua th√†nh c√¥ng bu·ªïi ph·ªèng v·∫•n v√† ");
        body.append("CH√çNH TH·ª®C tr·ªü th√†nh th√†nh vi√™n m·ªõi c·ªßa ƒë·ªôi ng≈©:\n\n");
        body.append("üìã V·ªã tr√≠: ").append(jobTitle).append("\n");
        body.append("üè¢ C√¥ng ty: ").append(companyName).append("\n\n");
        body.append("‚ú® K·∫æT QU·∫¢ PH·ªéNG V·∫§N:\n");
        body.append("‚Ä¢ B·∫°n ƒë√£ th·ªÉ hi·ªán xu·∫•t s·∫Øc trong bu·ªïi ph·ªèng v·∫•n\n");
        body.append("‚Ä¢ K·ªπ nƒÉng chuy√™n m√¥n ph√π h·ª£p v·ªõi y√™u c·∫ßu c√¥ng vi·ªác\n");
        body.append("‚Ä¢ Th√°i ƒë·ªô l√†m vi·ªác t√≠ch c·ª±c v√† nhi·ªát huy·∫øt\n");
        body.append("‚Ä¢ S·ª± ph√π h·ª£p tuy·ªát v·ªùi v·ªõi vƒÉn h√≥a c√¥ng ty\n\n");
        body.append("üìã B∆Ø·ªöC TI·∫æP THEO:\n");
        body.append("‚Ä¢ Ph√≤ng Nh√¢n s·ª± s·∫Ω li√™n h·ªá v·ªõi b·∫°n trong v√≤ng 2-3 ng√†y l√†m vi·ªác\n");
        body.append("‚Ä¢ B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng tin chi ti·∫øt v·ªÅ:\n");
        body.append("  ‚úì Ng√†y b·∫Øt ƒë·∫ßu l√†m vi·ªác ch√≠nh th·ª©c\n");
        body.append("  ‚úì M·ª©c l∆∞∆°ng v√† c√°c ch·∫ø ƒë·ªô ph√∫c l·ª£i\n");
        body.append("  ‚úì H·ª£p ƒë·ªìng lao ƒë·ªông v√† th·ªß t·ª•c ph√°p l√Ω\n");
        body.append("  ‚úì Ch∆∞∆°ng tr√¨nh ƒë·ªãnh h∆∞·ªõng cho nh√¢n vi√™n m·ªõi\n\n");
        body.append("üìû L∆ØU √ù QUAN TR·ªåNG:\n");
        body.append("‚Ä¢ Vui l√≤ng gi·ªØ ƒëi·ªán tho·∫°i v√† email lu√¥n s·∫µn s√†ng\n");
        body.append("‚Ä¢ Chu·∫©n b·ªã s·∫µn c√°c gi·∫•y t·ªù c√° nh√¢n c·∫ßn thi·∫øt\n");
        body.append("‚Ä¢ Li√™n h·ªá ngay v·ªõi ch√∫ng t√¥i n·∫øu c√≥ th·∫Øc m·∫Øc\n\n");
        body.append("Ch√∫ng t√¥i r·∫•t h√†o h·ª©ng ƒë∆∞·ª£c ƒë√≥n ch√†o b·∫°n gia nh·∫≠p ƒë·∫°i gia ƒë√¨nh ").append(companyName);
        body.append("! Tin r·∫±ng v·ªõi t√†i nƒÉng v√† nhi·ªát huy·∫øt c·ªßa m√¨nh, b·∫°n s·∫Ω g√≥p ph·∫ßn ");
        body.append("t·∫°o n√™n nh·ªØng th√†nh c√¥ng m·ªõi cho c√¥ng ty.\n\n");
        body.append("M·ªôt l·∫ßn n·ªØa, xin ch√∫c m·ª´ng b·∫°n ƒë√£ PASS ph·ªèng v·∫•n v√† ch√†o m·ª´ng ƒë·∫øn v·ªõi team! üéä\n\n");
        body.append("Tr√¢n tr·ªçng,\n");
        body.append("üè¢ Ban Gi√°m ƒë·ªëc & Ph√≤ng Nh√¢n s·ª±\n");
        body.append("üè∑Ô∏è ").append(companyName).append("\n");
        body.append("üìß Th√¥ng qua h·ªá th·ªëng tuy·ªÉn d·ª•ng JOB4YOU\n");
        body.append("üåê Website: http://localhost:8080");

        // G·ª≠i email tr·ª±c ti·∫øp
        SimpleMailMessage simpleMailMessage = new SimpleMailMessage();
        simpleMailMessage.setTo(to);
        simpleMailMessage.setSubject(subject);
        simpleMailMessage.setText(body.toString());
        simpleMailMessage.setFrom("viettaifptudn@gmail.com");
        mailSender.send(simpleMailMessage);
        
        System.out.println("Application accepted email sent to: " + to + " - Thread: " + Thread.currentThread().getName());
        return CompletableFuture.completedFuture(null);
        } catch (Exception e) {
            System.err.println("Failed to send application accepted email to: " + to + " - Error: " + e.getMessage());
            return CompletableFuture.failedFuture(e);
        }
    }

    /**
     * G·ª≠i email th√¥ng b√°o ·ª©ng tuy·ªÉn b·ªã t·ª´ ch·ªëi
     */
    @Async("emailTaskExecutor")
    public CompletableFuture<Void> sendApplicationRejectedEmail(String to, String candidateName, String jobTitle, String companyName) {
        try {
        String subject = "Th√¥ng b√°o k·∫øt qu·∫£ ·ª©ng tuy·ªÉn - " + jobTitle;
        StringBuilder body = new StringBuilder();

        body.append("Xin ch√†o ").append(candidateName).append(",\n\n");
        body.append("C·∫£m ∆°n b·∫°n ƒë√£ quan t√¢m v√† d√†nh th·ªùi gian ·ª©ng tuy·ªÉn v√†o v·ªã tr√≠:\n\n");
        body.append("üìã V·ªã tr√≠: ").append(jobTitle).append("\n");
        body.append("üè¢ C√¥ng ty: ").append(companyName).append("\n\n");
        body.append("Sau khi xem x√©t k·ªπ l∆∞·ª°ng h·ªì s∆° c·ªßa b·∫°n, r·∫•t ti·∫øc ch√∫ng t√¥i ph·∫£i th√¥ng b√°o r·∫±ng ");
        body.append("l·∫ßn n√†y b·∫°n ch∆∞a ph√π h·ª£p v·ªõi v·ªã tr√≠ c√¥ng vi·ªác n√†y.\n\n");
        body.append("ƒêi·ªÅu n√†y kh√¥ng c√≥ nghƒ©a l√† h·ªì s∆° c·ªßa b·∫°n kh√¥ng t·ªët. ");
        body.append("ƒê√¥i khi, quy·∫øt ƒë·ªãnh n√†y ph·ª• thu·ªôc v√†o nhi·ªÅu y·∫øu t·ªë nh∆∞ kinh nghi·ªám c·ª• th·ªÉ, ");
        body.append("k·ªπ nƒÉng chuy√™n m√¥n ho·∫∑c s·ª± ph√π h·ª£p v·ªõi vƒÉn h√≥a c√¥ng ty.\n\n");
        body.append("üåü Ch√∫ng t√¥i khuy·∫øn kh√≠ch b·∫°n:\n");
        body.append("‚Ä¢ Ti·∫øp t·ª•c theo d√µi c√°c c∆° h·ªôi vi·ªác l√†m kh√°c t·∫°i c√¥ng ty\n");
        body.append("‚Ä¢ C·∫£i thi·ªán v√† ph√°t tri·ªÉn th√™m k·ªπ nƒÉng c·ªßa m√¨nh\n");
        body.append("‚Ä¢ ·ª®ng tuy·ªÉn v√†o c√°c v·ªã tr√≠ ph√π h·ª£p kh√°c tr√™n JOB4YOU\n\n");
        body.append("Ch√∫c b·∫°n s·ªõm t√¨m ƒë∆∞·ª£c c√¥ng vi·ªác ph√π h·ª£p v√† th√†nh c√¥ng trong s·ª± nghi·ªáp!\n\n");
        body.append("Tr√¢n tr·ªçng,\n");
        body.append("üè¢ ").append(companyName).append("\n");
        body.append("üìß Th√¥ng qua h·ªá th·ªëng JOB4YOU");

        // G·ª≠i email tr·ª±c ti·∫øp
        SimpleMailMessage simpleMailMessage = new SimpleMailMessage();
        simpleMailMessage.setTo(to);
        simpleMailMessage.setSubject(subject);
        simpleMailMessage.setText(body.toString());
        simpleMailMessage.setFrom("viettaifptudn@gmail.com");
        mailSender.send(simpleMailMessage);
        
        System.out.println("Application rejected email sent to: " + to + " - Thread: " + Thread.currentThread().getName());
        return CompletableFuture.completedFuture(null);
        } catch (Exception e) {
            System.err.println("Failed to send application rejected email to: " + to + " - Error: " + e.getMessage());
            return CompletableFuture.failedFuture(e);
        }
    }

    /**
     * G·ª≠i email th√¥ng b√°o job application th√†nh c√¥ng cho student
     */
    @Async("emailTaskExecutor")
    public CompletableFuture<Void> sendJobApplicationSuccessEmail(String studentEmail, String studentName, String jobTitle, String companyName, String applicationId) {
        try {
            String subject = "‚úÖ ƒê∆°n ·ª©ng tuy·ªÉn ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng - " + jobTitle;

            StringBuilder body = new StringBuilder();
            body.append("Xin ch√†o ").append(studentName).append(",\n\n");
            body.append("üéâ Ch√∫c m·ª´ng! ƒê∆°n ·ª©ng tuy·ªÉn c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng.\n\n");
            body.append("üìã Th√¥ng tin ƒë∆°n ·ª©ng tuy·ªÉn:\n");
            body.append("   ‚Ä¢ V·ªã tr√≠: ").append(jobTitle).append("\n");
            body.append("   ‚Ä¢ C√¥ng ty: ").append(companyName).append("\n");
            body.append("   ‚Ä¢ Th·ªùi gian g·ª≠i: ").append(java.time.LocalDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm"))).append("\n\n");

            body.append("üìù Nh·ªØng b∆∞·ªõc ti·∫øp theo:\n");
            body.append("   1. Nh√† tuy·ªÉn d·ª•ng s·∫Ω xem x√©t h·ªì s∆° c·ªßa b·∫°n\n");
            body.append("   2. B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o khi c√≥ c·∫≠p nh·∫≠t\n");
            body.append("   3. N·∫øu ƒë∆∞·ª£c ch·ªçn, b·∫°n s·∫Ω ƒë∆∞·ª£c m·ªùi ph·ªèng v·∫•n\n\n");

            body.append("üí° L·ªùi khuy√™n:\n");
            body.append("   ‚Ä¢ Ki·ªÉm tra email th∆∞·ªùng xuy√™n ƒë·ªÉ kh√¥ng b·ªè l·ª° th√¥ng b√°o\n");
            body.append("   ‚Ä¢ C·∫≠p nh·∫≠t h·ªì s∆° c√° nh√¢n ƒë·ªÉ tƒÉng c∆° h·ªôi\n");
            body.append("   ‚Ä¢ Tham gia c√°c s·ª± ki·ªán tuy·ªÉn d·ª•ng c·ªßa ch√∫ng t√¥i\n\n");

            body.append("üîç Theo d√µi ƒë∆°n ·ª©ng tuy·ªÉn:\n");
            body.append("   Truy c·∫≠p: http://localhost:8080/Student/applications\n\n");

            body.append("N·∫øu c√≥ th·∫Øc m·∫Øc, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i.\n\n");
            body.append("Ch√∫c b·∫°n th√†nh c√¥ng!\n\n");
            body.append("Tr√¢n tr·ªçng,\n");
            body.append("üè¢ ƒê·ªôi ng≈© JOB4YOU\n");
            body.append("üìû Hotline: 1900-xxxx\n");
            body.append("üåê Website: http://localhost:8080");

            // G·ª≠i email tr·ª±c ti·∫øp
            SimpleMailMessage simpleMailMessage = new SimpleMailMessage();
            simpleMailMessage.setTo(studentEmail);
            simpleMailMessage.setSubject(subject);
            simpleMailMessage.setText(body.toString());
            simpleMailMessage.setFrom("viettaifptudn@gmail.com");
            mailSender.send(simpleMailMessage);
            
            System.out.println("Job application success email sent to: " + studentEmail + " - Thread: " + Thread.currentThread().getName());
            return CompletableFuture.completedFuture(null);

        } catch (Exception e) {
            System.err.println("Failed to send job application success email to: " + studentEmail + " - Error: " + e.getMessage());
            return CompletableFuture.failedFuture(e);
        }
    }

    /**
     * G·ª≠i email th√¥ng b√°o c√≥ ƒë∆°n ·ª©ng tuy·ªÉn m·ªõi cho employer
     */
    @Async("emailTaskExecutor")
    public CompletableFuture<Void> sendNewApplicationNotificationEmail(String employerEmail, String employerName, String jobTitle, String candidateName, String applicationId) {
        try {
            String subject = "üì¨ ƒê∆°n ·ª©ng tuy·ªÉn m·ªõi - " + jobTitle;

            StringBuilder body = new StringBuilder();
            body.append("Xin ch√†o ").append(employerName).append(",\n\n");
            body.append("üéØ B·∫°n c√≥ m·ªôt ƒë∆°n ·ª©ng tuy·ªÉn m·ªõi cho v·ªã tr√≠: ").append(jobTitle).append("\n\n");
            body.append("üë§ Th√¥ng tin ·ª©ng vi√™n:\n");
            body.append("   ‚Ä¢ T√™n: ").append(candidateName).append("\n");
            body.append("   ‚Ä¢ Th·ªùi gian n·ªôp: ").append(java.time.LocalDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm"))).append("\n\n");

            body.append("üìã ƒê·ªÉ xem chi ti·∫øt v√† ph·∫£n h·ªìi:\n");
            body.append("   Truy c·∫≠p: http://localhost:8080/Employer/Applications\n\n");

            body.append("‚è∞ L·ªùi khuy√™n:\n");
            body.append("   ‚Ä¢ Ph·∫£n h·ªìi s·ªõm ƒë·ªÉ tƒÉng tr·∫£i nghi·ªám ·ª©ng vi√™n\n");
            body.append("   ‚Ä¢ ƒê√°nh gi√° h·ªì s∆° m·ªôt c√°ch kh√°ch quan\n");
            body.append("   ‚Ä¢ Li√™n h·ªá ·ª©ng vi√™n trong v√≤ng 48 gi·ªù\n\n");

            body.append("N·∫øu c√≥ th·∫Øc m·∫Øc, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i.\n\n");
            body.append("Tr√¢n tr·ªçng,\n");
            body.append("üè¢ ƒê·ªôi ng≈© JOB4YOU\n");
            body.append("üìû Hotline: 1900-xxxx\n");
            body.append("üåê Website: http://localhost:8080");

            // G·ª≠i email tr·ª±c ti·∫øp
            SimpleMailMessage simpleMailMessage = new SimpleMailMessage();
            simpleMailMessage.setTo(employerEmail);
            simpleMailMessage.setSubject(subject);
            simpleMailMessage.setText(body.toString());
            simpleMailMessage.setFrom("viettaifptudn@gmail.com");
            mailSender.send(simpleMailMessage);
            
            System.out.println("New application notification email sent to employer: " + employerEmail + " - Thread: " + Thread.currentThread().getName());
            return CompletableFuture.completedFuture(null);

        } catch (Exception e) {
            System.err.println("Failed to send new application notification email to employer: " + employerEmail + " - Error: " + e.getMessage());
            return CompletableFuture.failedFuture(e);
        }
    }

    /**
     * G·ª≠i email th√¥ng b√°o c√≥ ƒë∆°n ·ª©ng tuy·ªÉn m·ªõi cho employer (t·ª´ form apply)
     * S·ª≠ d·ª•ng th√¥ng tin t·ª´ form thay v√¨ th√¥ng tin student ƒë√£ ƒëƒÉng nh·∫≠p
     */
    @Async("emailTaskExecutor")
    public CompletableFuture<Void> sendNewApplicationNotificationEmailFromForm(String employerEmail, String employerName, String jobTitle,
                                                          String candidateName, String candidateEmail, String candidatePhone,
                                                          String applicationId, String description) {
        try {
            String subject = "üì¨ ƒê∆°n ·ª©ng tuy·ªÉn m·ªõi - " + jobTitle;

            StringBuilder body = new StringBuilder();
            body.append("Xin ch√†o ").append(employerName).append(",\n\n");
            body.append("üéØ B·∫°n c√≥ m·ªôt ƒë∆°n ·ª©ng tuy·ªÉn m·ªõi cho v·ªã tr√≠: ").append(jobTitle).append("\n\n");
            body.append("üë§ Th√¥ng tin ·ª©ng vi√™n:\n");
            body.append("   ‚Ä¢ T√™n: ").append(candidateName).append("\n");
            body.append("   ‚Ä¢ Email: ").append(candidateEmail).append("\n");
            body.append("   ‚Ä¢ S·ªë ƒëi·ªán tho·∫°i: ").append(candidatePhone).append("\n");
            body.append("   ‚Ä¢ Th·ªùi gian n·ªôp: ").append(java.time.LocalDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm"))).append("\n\n");

            if (description != null && !description.trim().isEmpty()) {
                body.append("üìù N·ªôi dung ·ª©ng tuy·ªÉn:\n");
                body.append("   ").append(description).append("\n\n");
            }

            body.append("üìã ƒê·ªÉ xem chi ti·∫øt v√† ph·∫£n h·ªìi:\n");
            body.append("   Truy c·∫≠p: http://localhost:8080/Employer/Applications\n\n");

            body.append("‚è∞ L·ªùi khuy√™n:\n");
            body.append("   ‚Ä¢ Ph·∫£n h·ªìi s·ªõm ƒë·ªÉ tƒÉng tr·∫£i nghi·ªám ·ª©ng vi√™n\n");
            body.append("   ‚Ä¢ ƒê√°nh gi√° h·ªì s∆° m·ªôt c√°ch kh√°ch quan\n");
            body.append("   ‚Ä¢ Li√™n h·ªá ·ª©ng vi√™n trong v√≤ng 48 gi·ªù\n\n");

            body.append("N·∫øu c√≥ th·∫Øc m·∫Øc, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i.\n\n");
            body.append("Tr√¢n tr·ªçng,\n");
            body.append("üè¢ ƒê·ªôi ng≈© JOB4YOU\n");
            body.append("üìû Hotline: 1900-xxxx\n");
            body.append("üåê Website: http://localhost:8080");

            // G·ª≠i email tr·ª±c ti·∫øp
            SimpleMailMessage simpleMailMessage = new SimpleMailMessage();
            simpleMailMessage.setTo(employerEmail);
            simpleMailMessage.setSubject(subject);
            simpleMailMessage.setText(body.toString());
            simpleMailMessage.setFrom("viettaifptudn@gmail.com");
            mailSender.send(simpleMailMessage);
            
            System.out.println("New application notification email sent to employer: " + employerEmail + " (from form data) - Thread: " + Thread.currentThread().getName());
            return CompletableFuture.completedFuture(null);

        } catch (Exception e) {
            System.err.println("Failed to send new application notification email to employer: " + employerEmail + " - Error: " + e.getMessage());
            return CompletableFuture.failedFuture(e);
        }
    }
}
