package com.example.swp391_d01_g3.service.scheduled;

import com.example.swp391_d01_g3.model.Account;
import com.example.swp391_d01_g3.model.BanRecord;
import com.example.swp391_d01_g3.repository.BanRecordRepository;
import com.example.swp391_d01_g3.repository.IAccountRepository;
import com.example.swp391_d01_g3.service.email.EmailService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * üïí Ban Expiry Scheduled Service
 * 
 * Service n√†y ch·∫°y ƒë·ªãnh k·ª≥ ƒë·ªÉ:
 * 1. T·ª± ƒë·ªông unban users khi h·∫øt th·ªùi gian ban
 * 2. G·ª≠i email th√¥ng b√°o ban s·∫Øp h·∫øt h·∫°n
 * 3. C·∫≠p nh·∫≠t tr·∫°ng th√°i ban records
 */
@Service
public class BanExpiryScheduledService {
    
    private static final Logger logger = LoggerFactory.getLogger(BanExpiryScheduledService.class);
    
    @Autowired
    private BanRecordRepository banRecordRepository;
    
    @Autowired
    private IAccountRepository accountRepository;
    
    @Autowired
    private EmailService emailService;
    
    /**
     * Ch·∫°y m·ªói 5 ph√∫t ƒë·ªÉ ki·ªÉm tra ban ƒë√£ h·∫øt h·∫°n
     * Cron: "0 *5 * * * *" = m·ªói 5 ph√∫t
     *      */
    @Scheduled(cron = "0 */5 * * * *")
    @Transactional
    public void processExpiredBans() {
        try {
            logger.info("üïí Starting expired ban check...");
            
            LocalDateTime now = LocalDateTime.now();
            
            // T√¨m t·∫•t c·∫£ ban records ƒë√£ h·∫øt h·∫°n
            List<BanRecord> expiredBans = banRecordRepository.findExpiredBans(now);
            
            if (expiredBans.isEmpty()) {
                logger.info("‚úÖ No expired bans found");
                return;
            }
            
            logger.info("üîç Found {} expired bans to process", expiredBans.size());
            
            int successCount = 0;
            int errorCount = 0;
            
            for (BanRecord banRecord : expiredBans) {
                try {
                    // Unban user
                    unbanExpiredUser(banRecord);
                    successCount++;
                    
                } catch (Exception e) {
                    logger.error("‚ùå Error processing expired ban for user {}: {}", 
                               banRecord.getBannedUser().getUserId(), e.getMessage());
                    errorCount++;
                }
            }
            
            logger.info("‚úÖ Expired ban processing completed: {} success, {} errors", 
                       successCount, errorCount);
            
        } catch (Exception e) {
            logger.error("‚ùå Error in expired ban check: {}", e.getMessage(), e);
        }
    }
    
    /**
     * Ch·∫°y m·ªói ng√†y l√∫c 9:00 AM ƒë·ªÉ nh·∫Øc nh·ªü users ban s·∫Øp h·∫øt h·∫°n
     * Cron: "0 0 9 * * *" = 9:00 AM m·ªói ng√†y
     */
    @Scheduled(cron = "0 0 9 * * *")
    public void sendBanExpiryReminders() {
        try {
            logger.info("üìÖ Starting ban expiry reminder check...");
            
            LocalDateTime now = LocalDateTime.now();
            LocalDateTime threeDaysLater = now.plusDays(3);
            
            // T√¨m ban records s·∫Øp h·∫øt h·∫°n trong 3 ng√†y t·ªõi
            List<BanRecord> expiringBans = banRecordRepository.findBansExpiringWithin(now, threeDaysLater);
            
            if (expiringBans.isEmpty()) {
                logger.info("‚úÖ No bans expiring soon");
                return;
            }
            
            logger.info("üìß Found {} bans expiring within 3 days, sending reminders...", expiringBans.size());
            
            int emailsSent = 0;
            
            for (BanRecord banRecord : expiringBans) {
                try {
                    sendExpiryReminderEmail(banRecord);
                    emailsSent++;
                    
                } catch (Exception e) {
                    logger.error("‚ùå Error sending expiry reminder for user {}: {}", 
                               banRecord.getBannedUser().getUserId(), e.getMessage());
                }
            }
            
            logger.info("‚úÖ Ban expiry reminders sent: {} emails", emailsSent);
            
        } catch (Exception e) {
            logger.error("‚ùå Error in ban expiry reminder check: {}", e.getMessage(), e);
        }
    }
    
    /**
     * Ch·∫°y m·ªói tu·∫ßn v√†o Ch·ªß nh·∫≠t l√∫c 2:00 AM ƒë·ªÉ cleanup old ban records
     * Cron: "0 0 2 * * SUN" = 2:00 AM m·ªói Ch·ªß nh·∫≠t
     */
    @Scheduled(cron = "0 0 2 * * SUN")
    @Transactional
    public void cleanupOldBanRecords() {
        try {
            logger.info("üßπ Starting old ban records cleanup...");
            
            LocalDateTime sixMonthsAgo = LocalDateTime.now().minusMonths(6);
            
            // T√¨m ban records ƒë√£ unbanned ho·∫∑c expired c√°ch ƒë√¢y 6 th√°ng
            List<BanRecord> oldBanRecords = banRecordRepository.findBanRecordsByDateRange(
                LocalDateTime.now().minusYears(10), sixMonthsAgo, 
                org.springframework.data.domain.PageRequest.of(0, 1000)
            ).getContent().stream()
            .filter(br -> br.getStatus() == BanRecord.BanStatus.UNBANNED || 
                         br.getStatus() == BanRecord.BanStatus.EXPIRED)
            .collect(java.util.stream.Collectors.toList());
            
            if (oldBanRecords.isEmpty()) {
                logger.info("‚úÖ No old ban records to cleanup");
                return;
            }
            
            logger.info("üóëÔ∏è Found {} old ban records to archive", oldBanRecords.size());
            
            // Note: Thay v√¨ x√≥a, ch√∫ng ta c√≥ th·ªÉ archive ho·∫∑c mark as archived
            // ƒê·ªÉ gi·ªØ audit trail, ·ªü ƒë√¢y ch·ªâ log th√¥ng tin
            for (BanRecord banRecord : oldBanRecords) {
                logger.debug("üìù Old ban record: User {} - {} - {}", 
                           banRecord.getBannedUser().getUserId(),
                           banRecord.getBanReason().getDescription(),
                           banRecord.getBannedAt());
            }
            
            logger.info("‚úÖ Old ban records cleanup completed");
            
        } catch (Exception e) {
            logger.error("‚ùå Error in old ban records cleanup: {}", e.getMessage(), e);
        }
    }
    
    /**
     * Unban user khi h·∫øt th·ªùi gian ban
     */
    private void unbanExpiredUser(BanRecord banRecord) {
        try {
            Account bannedUser = banRecord.getBannedUser();
            
            // Mark ban record as expired
            banRecord.markAsExpired();
            banRecordRepository.save(banRecord);
            
            // Activate user account
            bannedUser.setStatus(Account.Status.active);
            accountRepository.save(bannedUser);
            
            // Send unban notification email
            long daysBanned = java.time.Duration.between(banRecord.getBannedAt(), LocalDateTime.now()).toDays();
            String banDuration = daysBanned > 0 ? daysBanned + " ng√†y" : "d∆∞·ªõi 1 ng√†y";
            
            emailService.sendUnbanNotificationEmail(
                bannedUser.getEmail(),
                bannedUser.getFullName(),
                banRecord.getBanReason().getDescription(),
                banDuration,
                "System Auto-Unban"
            );
            
            logger.info("‚úÖ Auto-unbanned user: {} ({})", 
                       bannedUser.getEmail(), banRecord.getBanReason().getDescription());
            
        } catch (Exception e) {
            logger.error("‚ùå Error unbanning expired user {}: {}", 
                       banRecord.getBannedUser().getUserId(), e.getMessage());
            throw e;
        }
    }
    
    /**
     * G·ª≠i email nh·∫Øc nh·ªü ban s·∫Øp h·∫øt h·∫°n
     */
    private void sendExpiryReminderEmail(BanRecord banRecord) {
        try {
            Account bannedUser = banRecord.getBannedUser();
            
            if (banRecord.getBanExpiresAt() != null) {
                long daysRemaining = java.time.Duration.between(
                    LocalDateTime.now(), banRecord.getBanExpiresAt()
                ).toDays();
                
                if (daysRemaining >= 0 && daysRemaining <= 3) {
                    String expiryDateStr = banRecord.getBanExpiresAt()
                        .format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm"));
                    
                    emailService.sendBanExpiryReminderEmail(
                        bannedUser.getEmail(),
                        bannedUser.getFullName(),
                        (int) daysRemaining,
                        expiryDateStr
                    );
                    
                    logger.info("üìß Sent ban expiry reminder to: {} ({} days remaining)", 
                               bannedUser.getEmail(), daysRemaining);
                }
            }
            
        } catch (Exception e) {
            logger.error("‚ùå Error sending ban expiry reminder to user {}: {}", 
                       banRecord.getBannedUser().getUserId(), e.getMessage());
            throw e;
        }
    }
    
    /**
     * Manual method ƒë·ªÉ force check expired bans (cho testing)
     */
    public void forceCheckExpiredBans() {
        logger.info("üîß Manual force check for expired bans triggered");
        processExpiredBans();
    }
    
    /**
     * Manual method ƒë·ªÉ force send expiry reminders (cho testing)
     */
    public void forceSendExpiryReminders() {
        logger.info("üîß Manual force send expiry reminders triggered");
        sendBanExpiryReminders();
    }
} 