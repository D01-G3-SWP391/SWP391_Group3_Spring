package com.example.swp391_d01_g3.controller.register;

import com.example.swp391_d01_g3.model.*;
import com.example.swp391_d01_g3.service.email.EmailService;
import com.example.swp391_d01_g3.service.employer.IEmployerService;
import com.example.swp391_d01_g3.service.student.IStudentService;
import com.example.swp391_d01_g3.service.security.IAccountService;
import com.example.swp391_d01_g3.service.jobfield.IJobfieldService;
import jakarta.validation.Valid;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.util.Optional;

@Controller
@RequestMapping("/Register")
public class Register {

    @Autowired
    private IJobfieldService iJobfieldService;

    @Autowired
    private IStudentService iStudentService;

    @Autowired
    private IEmployerService iEmployerService;

    @Autowired
    private IAccountService iAccountService;

    @Autowired
    private PasswordEncoder passwordEncoder;
    
    @Autowired
    private EmailService emailService;

    @GetMapping("")
    public String showRegister (){
        return "register/registerPage";
    }
    @GetMapping("/Student")
    public String showRegisterStudent(Model model){
        AccountDTO accountDTO = new AccountDTO();
        model.addAttribute("accountDTO",accountDTO);
        return "register/registerStudentPage";
    }
    @PostMapping("/registerStudent")
    public String registerStudent(@Valid @ModelAttribute("accountDTO") AccountDTO accountDTO, BindingResult bindingResult,
                                  RedirectAttributes redirectAttributes, Model model){
        new AccountDTO().validate(accountDTO,bindingResult);
        if (bindingResult.hasErrors()){
            return "register/registerStudentPage";
        }
        Account account = new Account();
        BeanUtils.copyProperties(accountDTO,account);
        account.setRole(Account.Role.student);
        account.setStatus(Account.Status.active);
        account.setPassword(passwordEncoder.encode(accountDTO.getPassword()));
        Account savedAccount = iAccountService.save(account);

        if (savedAccount != null && savedAccount.getUserId() != null) {
            Student student = new Student();
            student.setAccount(savedAccount);
            iStudentService.save(student);
            
            // G·ª≠i email ch√†o m·ª´ng
            sendWelcomeEmail(savedAccount.getEmail(), savedAccount.getFullName(), "Student");
        }
        
        redirectAttributes.addFlashAttribute("messages", "Registration successful!");
        return "redirect:/Login";
    }
    @GetMapping("/Employer")
    public String showRegisterEmployer(Model model){
        AccountEmployerDTO accountEmployerDTO = new AccountEmployerDTO();
        model.addAttribute("jobFields",iJobfieldService.findAll());
        model.addAttribute("accountEmployerDTO",accountEmployerDTO);
        return "register/registerEmployerPage";
    }
    @PostMapping("/registerEmployer")
    public String registerEmployer(@Valid @ModelAttribute("accountEmployerDTO") AccountEmployerDTO accountEmployerDTO, BindingResult bindingResult,
                                   RedirectAttributes redirectAttributes, Model model){
        new AccountEmployerDTO().validate(accountEmployerDTO,bindingResult);
        if (bindingResult.hasErrors()){
            return "register/registerEmployerPage";
        }
        Account account = new Account();
        BeanUtils.copyProperties(accountEmployerDTO,account);
        account.setRole(Account.Role.employer);
        account.setStatus(Account.Status.active);
        account.setPassword(passwordEncoder.encode(accountEmployerDTO.getPassword()));
        Account savedAccount = iAccountService.save(account);

        if (savedAccount == null || savedAccount.getUserId() == null) {
            model.addAttribute("accountEmployerDTO", accountEmployerDTO);
            model.addAttribute("jobFields",iJobfieldService.findAll());
            model.addAttribute("errorMessage", "L·ªói khi t·∫°o t√†i kho·∫£n. Vui l√≤ng th·ª≠ l·∫°i.");
            return "register/registerEmployerPage";
        }

        Employer employer = new Employer();
        employer.setCompanyName(accountEmployerDTO.getCompanyName());
        employer.setCompanyAddress(accountEmployerDTO.getCompanyAddress());
        employer.setCompanyDescription(accountEmployerDTO.getCompanyDescription());
        employer.setLogoUrl(accountEmployerDTO.getLogoUrl());

        Optional<JobField> jobFieldOptional = iJobfieldService.findById(accountEmployerDTO.getJobsFieldId());
        if (jobFieldOptional.isPresent()) {
            employer.setJobField(jobFieldOptional.get());
        } else {
            model.addAttribute("accountEmployerDTO", accountEmployerDTO);
            model.addAttribute("jobFields",iJobfieldService.findAll());
            model.addAttribute("errorMessage", "Lƒ©nh v·ª±c c√¥ng vi·ªác kh√¥ng h·ª£p l·ªá.");
            return "register/registerEmployerPage";
        }

        employer.setAccount(savedAccount);
        iEmployerService.saveEmployer(employer);
        
        // G·ª≠i email ch√†o m·ª´ng
        sendWelcomeEmail(savedAccount.getEmail(), savedAccount.getFullName(), "Employer");

        redirectAttributes.addFlashAttribute("messages", "Registration successful!");
        return "redirect:/Login";
    }
    
    /**
     * G·ª≠i email ch√†o m·ª´ng cho th√†nh vi√™n m·ªõi ƒëƒÉng k√Ω
     */
    private void sendWelcomeEmail(String email, String fullName, String role) {
        try {
            String subject = "üéâ Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi SWP391 Job Portal!";
            String roleText = role.equals("Student") ? "Sinh vi√™n" : "Nh√† tuy·ªÉn d·ª•ng";
            
            String body = "Xin ch√†o " + fullName + ",\n\n" +
                         "üéâ Ch√†o m·ª´ng b·∫°n ƒë√£ gia nh·∫≠p c·ªông ƒë·ªìng SWP391 Job Portal v·ªõi vai tr√≤ " + roleText + "!\n\n" +
                         "‚úÖ T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng\n" +
                         "üìß Email ƒëƒÉng nh·∫≠p: " + email + "\n" +
                         "üë§ Vai tr√≤: " + roleText + "\n\n";
            
            if (role.equals("Student")) {
                body += "üöÄ B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu:\n" +
                       "   ‚Ä¢ T√¨m ki·∫øm vi·ªác l√†m ph√π h·ª£p\n" +
                       "   ‚Ä¢ C·∫≠p nh·∫≠t h·ªì s∆° c√° nh√¢n\n" +
                       "   ‚Ä¢ Tham gia c√°c s·ª± ki·ªán tuy·ªÉn d·ª•ng\n" +
                       "   ‚Ä¢ N·ªôp ƒë∆°n ·ª©ng tuy·ªÉn tr·ª±c tuy·∫øn\n\n";
            } else {
                body += "üöÄ B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu:\n" +
                       "   ‚Ä¢ ƒêƒÉng tin tuy·ªÉn d·ª•ng\n" +
                       "   ‚Ä¢ Qu·∫£n l√Ω h·ªì s∆° c√¥ng ty\n" +
                       "   ‚Ä¢ T·ªï ch·ª©c s·ª± ki·ªán tuy·ªÉn d·ª•ng\n" +
                       "   ‚Ä¢ T√¨m ki·∫øm ·ª©ng vi√™n ph√π h·ª£p\n\n";
            }
            
            body += "üí¨ N·∫øu c√≥ b·∫•t k·ª≥ th·∫Øc m·∫Øc n√†o, ƒë·ª´ng ng·∫°i li√™n h·ªá v·ªõi ch√∫ng t√¥i.\n\n" +
                   "Ch√∫c b·∫°n c√≥ tr·∫£i nghi·ªám tuy·ªát v·ªùi!\n\n" +
                   "Tr√¢n tr·ªçng,\n" +
                   "üè¢ ƒê·ªôi ng≈© SWP391 Job Portal\n" +
                   "üìû Hotline: 1900-xxxx\n" +
                   "üåê Website: http://localhost:8080";
            
            emailService.sendEmail(email, subject, body);
            System.out.println("‚úÖ Welcome email sent to: " + email + " (Role: " + role + ")");
            
        } catch (Exception e) {
            System.err.println("‚ùå Failed to send welcome email to: " + email + " - Error: " + e.getMessage());
        }
    }
}
