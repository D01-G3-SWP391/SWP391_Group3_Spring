package com.example.swp391_d01_g3.model;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;

/**
 * üö´ BanRecord Entity
 * 
 * L∆∞u tr·ªØ th√¥ng tin chi ti·∫øt v·ªÅ vi·ªác ban user
 * Bao g·ªìm l√Ω do, th·ªùi gian ban, v√† admin th·ª±c hi·ªán
 */
@Entity
@Table(name = "ban_record")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class BanRecord {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "ban_record_id")
    private Integer banRecordId;
    
    /**
     * Account b·ªã ban
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false)
    private Account bannedUser;
    
    /**
     * Admin th·ª±c hi·ªán ban (nullable n·∫øu admin b·ªã x√≥a)
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "banned_by", nullable = true)
    private Account bannedByAdmin;
    
    /**
     * L√Ω do ban
     */
    @Enumerated(EnumType.STRING)
    @Column(name = "ban_reason", nullable = false)
    private BanReason banReason;
    
    /**
     * M√¥ t·∫£ chi ti·∫øt l√Ω do ban (t√πy ch·ªçn)
     */
    @Column(name = "ban_description", columnDefinition = "TEXT")
    private String banDescription;
    
    /**
     * Lo·∫°i th·ªùi gian ban
     */
    @Enumerated(EnumType.STRING)
    @Column(name = "duration_type", nullable = false)
    private BanDurationType banDurationType;
    
    /**
     * S·ªë ng√†y ban (null n·∫øu permanent)
     */
    @Column(name = "duration_days")
    private Integer banDurationDays;
    
    /**
     * Th·ªùi gian b·∫Øt ƒë·∫ßu ban
     */
    @Column(name = "ban_start_date", nullable = false)
    private LocalDateTime bannedAt;
    
    /**
     * Th·ªùi gian h·∫øt h·∫°n ban (null n·∫øu permanent)
     */
    @Column(name = "ban_end_date")
    private LocalDateTime banExpiresAt;
    
    /**
     * Tr·∫°ng th√°i ban hi·ªán t·∫°i
     */
    @Enumerated(EnumType.STRING)
    @Column(name = "status", nullable = false)
    private BanStatus status = BanStatus.ACTIVE;
    
    /**
     * Th·ªùi gian t·∫°o record
     */
    @Column(name = "created_at")
    private LocalDateTime createdAt;
    
    /**
     * Th·ªùi gian update g·∫ßn nh·∫•t
     */
    @Column(name = "updated_at")
    private LocalDateTime updatedAt;
    
    /**
     * Enum cho l√Ω do ban
     */
    public enum BanReason {
        SPAM("Spam n·ªôi dung"),
        INAPPROPRIATE_CONTENT("N·ªôi dung kh√¥ng ph√π h·ª£p"),
        FAKE_INFORMATION("Th√¥ng tin gi·∫£ m·∫°o"),
        HARASSMENT("Qu·∫•y r·ªëi ng∆∞·ªùi kh√°c"),
        FRAUD("L·ª´a ƒë·∫£o"),
        MULTIPLE_ACCOUNTS("T·∫°o nhi·ªÅu t√†i kho·∫£n"),
        VIOLATION_TERMS("Vi ph·∫°m ƒëi·ªÅu kho·∫£n s·ª≠ d·ª•ng"),
        SYSTEM_ABUSE("L·∫°m d·ª•ng h·ªá th·ªëng"),
        OTHER("L√Ω do kh√°c");
        
        private final String description;
        
        BanReason(String description) {
            this.description = description;
        }
        
        public String getDescription() {
            return description;
        }
    }
    
    /**
     * Enum cho lo·∫°i th·ªùi gian ban
     */
    public enum BanDurationType {
        TEMPORARY("T·∫°m th·ªùi"),
        PERMANENT("Vƒ©nh vi·ªÖn");
        
        private final String description;
        
        BanDurationType(String description) {
            this.description = description;
        }
        
        public String getDescription() {
            return description;
        }
    }
    
    /**
     * Enum cho tr·∫°ng th√°i ban
     */
    public enum BanStatus {
        ACTIVE("ƒêang ban"),
        EXPIRED("H·∫øt h·∫°n"),
        UNBANNED("ƒê√£ unban");
        
        private final String description;
        
        BanStatus(String description) {
            this.description = description;
        }
        
        public String getDescription() {
            return description;
        }
    }
    
    @PrePersist
    protected void onCreate() {
        LocalDateTime now = LocalDateTime.now();
        if (bannedAt == null) {
            bannedAt = now;
        }
        if (createdAt == null) {
            createdAt = now;
        }
        if (updatedAt == null) {
            updatedAt = now;
        }
        if (status == null) {
            status = BanStatus.ACTIVE;
        }
        
        // T√≠nh to√°n th·ªùi gian h·∫øt h·∫°n cho ban t·∫°m th·ªùi
        if (banDurationType == BanDurationType.TEMPORARY && banDurationDays != null && banDurationDays > 0) {
            banExpiresAt = bannedAt.plusDays(banDurationDays);
        }
    }
    
    @PreUpdate
    protected void onUpdate() {
        updatedAt = LocalDateTime.now();
    }
    
    /**
     * Ki·ªÉm tra ban ƒë√£ h·∫øt h·∫°n ch∆∞a
     */
    public boolean isExpired() {
        if (banDurationType == BanDurationType.PERMANENT) {
            return false;
        }
        return banExpiresAt != null && LocalDateTime.now().isAfter(banExpiresAt);
    }
    
    /**
     * Ki·ªÉm tra ban c√≤n hi·ªáu l·ª±c kh√¥ng
     */
    public boolean isActive() {
        return status == BanStatus.ACTIVE && !isExpired();
    }
    
    /**
     * ƒê√°nh d·∫•u ƒë√£ unban
     */
    public void markAsUnbanned(Account adminUser) {
        this.status = BanStatus.UNBANNED;
        this.updatedAt = LocalDateTime.now();
    }
    
    /**
     * ƒê√°nh d·∫•u ban ƒë√£ h·∫øt h·∫°n
     */
    public void markAsExpired() {
        this.status = BanStatus.EXPIRED;
    }
    
    /**
     * L·∫•y th√¥ng tin th·ªùi gian ban c√≤n l·∫°i
     */
    public String getRemainingTimeText() {
        if (banDurationType == BanDurationType.PERMANENT) {
            return "Vƒ©nh vi·ªÖn";
        }
        
        if (banExpiresAt == null) {
            return "Kh√¥ng x√°c ƒë·ªãnh";
        }
        
        LocalDateTime now = LocalDateTime.now();
        if (now.isAfter(banExpiresAt)) {
            return "ƒê√£ h·∫øt h·∫°n";
        }
        
        long daysRemaining = java.time.Duration.between(now, banExpiresAt).toDays();
        long hoursRemaining = java.time.Duration.between(now, banExpiresAt).toHours() % 24;
        
        if (daysRemaining > 0) {
            return String.format("%d ng√†y %d gi·ªù", daysRemaining, hoursRemaining);
        } else {
            return String.format("%d gi·ªù", hoursRemaining);
        }
    }
} 