package com.example.swp391_d01_g3.model;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDateTime;

/**
 * üí¨ ChatRoom Entity
 * 
 * ƒê·∫°i di·ªán cho m·ªôt ph√≤ng chat gi·ªØa Student v√† Employer
 * M·ªói c·∫∑p Student-Employer c√≥ th·ªÉ c√≥ nhi·ªÅu chat room (theo job post)
 */
@Entity
@Table(name = "chat_room")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class ChatRoom {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "chat_room_id")
    private Long chatRoomId;
    
    /**
     * Student tham gia chat
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "student_id", nullable = false)
    private Student student;
    
    /**
     * Employer tham gia chat
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "employer_id", nullable = false)
    private Employer employer;
    
    /**
     * Job Post l√†m context cho cu·ªôc chat (optional)
     * C√≥ th·ªÉ null n·∫øu l√† chat t·ªïng qu√°t
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "job_post_id")
    private JobPost jobPost;
    
    /**
     * Th·ªùi gian t·∫°o chat room
     */
    @Column(name = "created_at")
    private LocalDateTime createdAt;
    
    /**
     * Th·ªùi gian tin nh·∫Øn cu·ªëi c√πng
     */
    @Column(name = "last_message_at")
    private LocalDateTime lastMessageAt;
    
    /**
     * Tin nh·∫Øn cu·ªëi c√πng (ƒë·ªÉ hi·ªÉn th·ªã preview)
     */
    @Column(name = "last_message", length = 500)
    private String lastMessage;
    
    /**
     * Chat room c√≥ ƒëang active kh√¥ng
     */
    @Column(name = "is_active")
    private Boolean isActive = true;
    
    /**
     * S·ªë tin nh·∫Øn ch∆∞a ƒë·ªçc c·ªßa Student
     */
    @Column(name = "student_unread_count")
    private Integer studentUnreadCount = 0;
    
    /**
     * S·ªë tin nh·∫Øn ch∆∞a ƒë·ªçc c·ªßa Employer
     */
    @Column(name = "employer_unread_count")
    private Integer employerUnreadCount = 0;
    
    @PrePersist
    protected void onCreate() {
        if (createdAt == null) {
            createdAt = LocalDateTime.now();
        }
        if (isActive == null) {
            isActive = true;
        }
    }
    
    /**
     * T·∫°o unique identifier cho chat room
     */
    public String getRoomIdentifier() {
        return "room_" + chatRoomId;
    }
    
    /**
     * Ki·ªÉm tra user c√≥ ph·∫£i l√† participant c·ªßa room n√†y kh√¥ng
     */
    public boolean isParticipant(Long userId) {
        return (student != null && student.getAccount().getUserId().equals(userId)) ||
               (employer != null && employer.getAccount().getUserId().equals(userId));
    }
    
    /**
     * L·∫•y participant c√≤n l·∫°i (kh√¥ng ph·∫£i current user)
     */
    public Account getOtherParticipant(Long currentUserId) {
        if (student != null && student.getAccount().getUserId().equals(currentUserId)) {
            return employer.getAccount();
        } else if (employer != null && employer.getAccount().getUserId().equals(currentUserId)) {
            return student.getAccount();
        }
        return null;
    }
} 