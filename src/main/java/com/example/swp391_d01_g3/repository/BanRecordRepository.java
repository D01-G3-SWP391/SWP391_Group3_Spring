package com.example.swp391_d01_g3.repository;

import com.example.swp391_d01_g3.model.Account;
import com.example.swp391_d01_g3.model.BanRecord;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

/**
 * üö´ BanRecord Repository
 * 
 * Repository ƒë·ªÉ thao t√°c v·ªõi database cho BanRecord
 */
@Repository
public interface BanRecordRepository extends JpaRepository<BanRecord, Long> {
    
    /**
     * T√¨m ban record hi·ªán t·∫°i (active) c·ªßa user
     */
    @Query("SELECT br FROM BanRecord br WHERE br.bannedUser.userId = :userId AND br.status = 'ACTIVE'")
    Optional<BanRecord> findActiveBanByUserId(@Param("userId") Integer userId);
    
    /**
     * T√¨m t·∫•t c·∫£ ban records c·ªßa user (bao g·ªìm c·∫£ expired v√† unbanned)
     */
    @Query("SELECT br FROM BanRecord br WHERE br.bannedUser.userId = :userId ORDER BY br.bannedAt DESC")
    List<BanRecord> findAllBanRecordsByUserId(@Param("userId") Integer userId);
    
    /**
     * T√¨m ban records c·ªßa user v·ªõi ph√¢n trang
     */
    @Query("SELECT br FROM BanRecord br WHERE br.bannedUser.userId = :userId ORDER BY br.bannedAt DESC")
    Page<BanRecord> findBanRecordsByUserId(@Param("userId") Integer userId, Pageable pageable);
    
    /**
     * T√¨m t·∫•t c·∫£ ban records active
     */
    @Query("SELECT br FROM BanRecord br WHERE br.status = 'ACTIVE' ORDER BY br.bannedAt DESC")
    Page<BanRecord> findAllActiveBans(Pageable pageable);
    
    /**
     * T√¨m ban records ƒë√£ h·∫øt h·∫°n nh∆∞ng ch∆∞a ƒë∆∞·ª£c update status
     */
    @Query("SELECT br FROM BanRecord br WHERE br.status = 'ACTIVE' AND br.banDurationType = 'TEMPORARY' AND br.banExpiresAt < :currentTime")
    List<BanRecord> findExpiredBans(@Param("currentTime") LocalDateTime currentTime);
    
    /**
     * T√¨m ban records theo admin ƒë√£ ban
     */
    @Query("SELECT br FROM BanRecord br WHERE br.bannedByAdmin.userId = :adminId ORDER BY br.bannedAt DESC")
    Page<BanRecord> findBanRecordsByAdmin(@Param("adminId") Integer adminId, Pageable pageable);
    
    /**
     * ƒê·∫øm s·ªë l∆∞·ª£ng user ƒëang b·ªã ban
     */
    @Query("SELECT COUNT(br) FROM BanRecord br WHERE br.status = 'ACTIVE'")
    long countActiveBans();
    
    /**
     * ƒê·∫øm s·ªë l∆∞·ª£ng ban theo l√Ω do
     */
    @Query("SELECT COUNT(br) FROM BanRecord br WHERE br.banReason = :reason AND br.status = 'ACTIVE'")
    long countActiveBansByReason(@Param("reason") BanRecord.BanReason reason);
    
    /**
     * T√¨m ban records theo th·ªùi gian
     */
    @Query("SELECT br FROM BanRecord br WHERE br.bannedAt BETWEEN :startDate AND :endDate ORDER BY br.bannedAt DESC")
    Page<BanRecord> findBanRecordsByDateRange(@Param("startDate") LocalDateTime startDate, 
                                             @Param("endDate") LocalDateTime endDate, 
                                             Pageable pageable);
    
    /**
     * Ki·ªÉm tra user c√≥ ƒëang b·ªã ban kh√¥ng
     */
    @Query("SELECT CASE WHEN COUNT(br) > 0 THEN true ELSE false END FROM BanRecord br WHERE br.bannedUser.userId = :userId AND br.status = 'ACTIVE'")
    boolean isUserCurrentlyBanned(@Param("userId") Integer userId);
    
    /**
     * T√¨m t·∫•t c·∫£ users ƒëang b·ªã ban permanent
     */
    @Query("SELECT br FROM BanRecord br WHERE br.status = 'ACTIVE' AND br.banDurationType = 'PERMANENT' ORDER BY br.bannedAt DESC")
    Page<BanRecord> findAllPermanentBans(Pageable pageable);
    
    /**
     * T√¨m ban records s·∫Øp h·∫øt h·∫°n (trong v√≤ng X ng√†y)
     */
    @Query("SELECT br FROM BanRecord br WHERE br.status = 'ACTIVE' AND br.banDurationType = 'TEMPORARY' AND br.banExpiresAt BETWEEN :currentTime AND :endTime ORDER BY br.banExpiresAt ASC")
    List<BanRecord> findBansExpiringWithin(@Param("currentTime") LocalDateTime currentTime, 
                                          @Param("endTime") LocalDateTime endTime);
} 