package com.example.swp391_d01_g3.dto;

import com.example.swp391_d01_g3.model.BanRecord;
import jakarta.validation.constraints.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * üö´ BanRequestDTO
 * 
 * DTO ƒë·ªÉ nh·∫≠n d·ªØ li·ªáu t·ª´ form ban user
 * Enhanced v·ªõi validation logic chuy·ªÉn t·ª´ frontend v·ªÅ backend
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class BanRequestDTO {
    
    /**
     * ID c·ªßa user b·ªã ban
     */
    @NotNull(message = "User ID kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
    @Positive(message = "User ID ph·∫£i l√† s·ªë d∆∞∆°ng")
    private Integer userId;
    
    /**
     * L√Ω do ban
     */
    @NotNull(message = "L√Ω do ban kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
    private BanRecord.BanReason banReason;
    
    /**
     * M√¥ t·∫£ chi ti·∫øt l√Ω do ban (t√πy ch·ªçn)
     */
    @Size(max = 1000, message = "M√¥ t·∫£ kh√¥ng ƒë∆∞·ª£c qu√° 1000 k√Ω t·ª±")
    private String banDescription;
    
    /**
     * Lo·∫°i th·ªùi gian ban (TEMPORARY ho·∫∑c PERMANENT)
     */
    @NotNull(message = "Lo·∫°i th·ªùi gian ban kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng")
    private BanRecord.BanDurationType banDurationType;
    
    /**
     * S·ªë ng√†y ban (ch·ªâ c√≥ khi ban t·∫°m th·ªùi)
     * Note: Validation ƒë∆∞·ª£c x·ª≠ l√Ω trong custom logic, kh√¥ng d√πng annotations
     */
    private Integer banDurationDays;
    
    /**
     * Enhanced validation logic chuy·ªÉn t·ª´ frontend v·ªÅ backend
     * ‚úÖ FIXED: Lo·∫°i b·ªè xung ƒë·ªôt v·ªõi Jakarta annotations
     */
    public boolean isValid() {
        // N·∫øu ban permanent th√¨ kh√¥ng c·∫ßn duration days
        if (banDurationType == BanRecord.BanDurationType.PERMANENT) {
            return banDurationDays == null || banDurationDays == 0; // ‚úÖ Cho ph√©p null ho·∫∑c 0
        }
        
        // N·∫øu ban temporary th√¨ ph·∫£i c√≥ duration days v√† > 0
        if (banDurationType == BanRecord.BanDurationType.TEMPORARY) {
            return banDurationDays != null && banDurationDays > 0 && banDurationDays <= 365;
        }
        
        return false;
    }
    
    /**
     * Validation th√¥ng tin user (chuy·ªÉn t·ª´ frontend v·ªÅ backend)
     */
    public boolean isUserIdValid() {
        return userId != null && userId > 0;
    }
    
    /**
     * Validation m√¥ t·∫£ ban (chuy·ªÉn t·ª´ frontend v·ªÅ backend)
     */
    public boolean isDescriptionValid() {
        return banDescription == null || banDescription.length() <= 1000;
    }
    
    /**
     * L·∫•y text m√¥ t·∫£ th·ªùi gian ban
     */
    public String getDurationText() {
        if (banDurationType == BanRecord.BanDurationType.PERMANENT) {
            return "Vƒ©nh vi·ªÖn";
        } else if (banDurationDays != null) {
            return banDurationDays + " ng√†y";
        }
        return "Kh√¥ng x√°c ƒë·ªãnh";
    }
    
    /**
     * L·∫•y th√¥ng b√°o validation l·ªói (chuy·ªÉn t·ª´ frontend v·ªÅ backend)
     */
    public String getValidationErrorMessage() {
        if (!isUserIdValid()) {
            return "User ID kh√¥ng h·ª£p l·ªá";
        }
        if (banReason == null) {
            return "Vui l√≤ng ch·ªçn l√Ω do ban";
        }
        if (banDurationType == null) {
            return "Vui l√≤ng ch·ªçn lo·∫°i th·ªùi gian ban";
        }
        if (!isDescriptionValid()) {
            return "M√¥ t·∫£ qu√° d√†i (t·ªëi ƒëa 1000 k√Ω t·ª±)";
        }
        if (!isValid()) {
            if (banDurationType == BanRecord.BanDurationType.TEMPORARY) {
                return "Ban t·∫°m th·ªùi ph·∫£i c√≥ s·ªë ng√†y t·ª´ 1-365";
            } else {
                return "Ban vƒ©nh vi·ªÖn ph·∫£i c√≥ s·ªë ng√†y = 0 ho·∫∑c ƒë·ªÉ tr·ªëng";
            }
        }
        return null;
    }
} 